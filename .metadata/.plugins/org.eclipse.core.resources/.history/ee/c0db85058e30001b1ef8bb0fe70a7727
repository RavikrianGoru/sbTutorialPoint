package com.rk.springboot.sample.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.AsyncHandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

public class ExecuteTimeInterceptor implements AsyncHandlerInterceptor {

	private static final Logger log = LoggerFactory.getLogger(ExecuteTimeInterceptor.class);

	// before the actual handler will be executed
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {

		long startTime = System.currentTimeMillis();
		request.setAttribute("startTime", startTime);
		log.debug("Pre Handle method is Calling {}", startTime);
		return true;
	}

	// after the handler is executed
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		long startTime = (Long) request.getAttribute("startTime");

		long endTime = System.currentTimeMillis();

		long executeTime = endTime - startTime;

		// modified the exisitng modelAndView
		modelAndView.addObject("executeTime", executeTime);

		log.debug("[" + handler + "] executeTime : " + executeTime + "ms");
	}

	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		AsyncHandlerInterceptor.super.afterCompletion(request, response, handler, ex);
	}

}
