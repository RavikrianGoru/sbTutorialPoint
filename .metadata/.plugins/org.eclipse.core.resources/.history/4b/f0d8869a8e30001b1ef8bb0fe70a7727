package com.rk.springboot.sample.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.AsyncHandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

public class MaintenanceInterceptor implements AsyncHandlerInterceptor {
	private static final Logger log = LoggerFactory.getLogger(MaintenanceInterceptor.class);

	 private int maintenanceStartTime;
	    private int maintenanceEndTime;
	    private String maintenanceMapping;
	    
	    public void setMaintenanceMapping(String maintenanceMapping) {
	        this.maintenanceMapping = maintenanceMapping;
	    }

	    public void setMaintenanceStartTime(int maintenanceStartTime) {
	        this.maintenanceStartTime = maintenanceStartTime;
	    }

	    public void setMaintenanceEndTime(int maintenanceEndTime) {
	        this.maintenanceEndTime = maintenanceEndTime;
	    }

	    //before the actual handler will be executed
	    public boolean preHandle(HttpServletRequest request, 
	            HttpServletResponse response, Object handler)
	        throws Exception {
	        
	        Calendar cal = Calendar.getInstance();
	        int hour = cal.get(cal.HOUR_OF_DAY);
	        
	        if (hour >= maintenanceStartTime && hour <= maintenanceEndTime) {
	            //maintenance time, send to maintenance page
	            response.sendRedirect(maintenanceMapping);
	            return false;
	        } else {
	            return true;
	        }
	        
	    }

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		AsyncHandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		AsyncHandlerInterceptor.super.afterCompletion(request, response, handler, ex);
	}

}
